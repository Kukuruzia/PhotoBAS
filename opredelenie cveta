import numpy as np
import argparse
import cv2

# parser = argparse.ArgumentParser()
# parser.add_argument("image", metavar="image_file", help = "Image file")
# args = parser.parse_args()

# image = cv2.imread(args.image)
image = cv2.imread("new_pic.jpg")
image_output = image.copy()
# конвертация в grayscale
image_gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# детекция кругов
circles = cv2.HoughCircles(image_gray, cv2.HOUGH_GRADIENT, 1.5, 20, param1=1, param2=20, minRadius=8, maxRadius=12)

if circles is not None:
    # конвертация координат центра и радиуса в int
    circles = np.round(circles[0, :]).astype("int")

    for (x, y, r) in circles:
        print(f"Center: {x},{y}   Radius: {r}")
        # обведём найденный круг
        cv2.circle(image_output, (x, y), r, (0, 255, 0), 1)
        # и ткнём точку в центр
        cv2.circle(image_output, (x, y), 2, (255, 0 , 255), -1)

    cv2.imshow("The result", image_output)
    cv2.waitKey(0)


  from PIL import Image
import numpy as np

img = Image.open('lenagr.jpg')
data = np.array(img)

converted = np.where(data == 4, 255, 0)

img = Image.fromarray(converted.astype('uint8'))
img.save('new_pic.jpg')


  from PIL import Image

def replace_color(image_path, target_color, replacement_color):
  # Открываем изображение
  image = Image.open(lenagr.jpg)
  # Получаем данные о пикселях
  pixels = image.load()
  # Получаем размер изображения
  width, height = image.size

  # Проходим по каждому пикселю
  for x in range(width):
      for y in range(height):
          # Получаем цвет текущего пикселя
          current_color = pixels[x, y]

          # Проверяем, соответствует ли текущий цвет целевому цвету
          if current_color == target_color:
             # Заменяем цвет
             pixels[x, y] = replacement_color

  # Сохраняем измененное изображение
  image.save("modified_image.png")

# Путь к исходному изображению
image_path = "example_image.png"
# Целевой цвет, который нужно заменить (RGB 4, 255, 0)
target_color = (4, 255, 0)
# Цвет, на который нужно заменить (RGB 0, 0, 0)
replacement_color = (0, 0, 0)

# Вызываем функцию замены цвета
replace_color(image_path, target_color, replacement_color)
